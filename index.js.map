{"version":3,"file":"index.js","sources":["../node_modules/@stdlib/constants-float64-pinf/lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* @module @stdlib/constants-float64-pinf\n* @type {number}\n*\n* @example\n* import FLOAT64_PINF from '@stdlib/constants-float64-pinf' ;\n* // returns Infinity\n*/\n\n\n// MAIN //\n\n/**\n* Double-precision floating-point positive infinity.\n*\n* ## Notes\n*\n* Double-precision floating-point positive infinity has the bit sequence\n*\n* ```binarystring\n* 0 11111111111 00000000000000000000 00000000000000000000000000000000\n* ```\n*\n* @constant\n* @type {number}\n* @default Number.POSITIVE_INFINITY\n* @see [IEEE 754]{@link https://en.wikipedia.org/wiki/IEEE_754-1985}\n*/\nvar FLOAT64_PINF = Number.POSITIVE_INFINITY; // eslint-disable-line stdlib/require-globals\n\n\n// EXPORTS //\n\nexport default FLOAT64_PINF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Returns the expected value of a Pareto (Type I) distribution.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {PositiveNumber} expected value\n*\n* @example\n* var v = mean( 1.0, 1.0 );\n* // returns Infinity\n*\n* @example\n* var v = mean( 4.0, 12.0 );\n* // returns 16.0\n*\n* @example\n* var v = mean( 8.0, 2.0 );\n* // returns ~2.286\n*\n* @example\n* var v = mean( 1.0, -0.1 );\n* // returns NaN\n*\n* @example\n* var v = mean( -0.1, 1.0 );\n* // returns NaN\n*\n* @example\n* var v = mean( 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var v = mean( NaN, 2.0 );\n* // returns NaN\n*/\nfunction mean( alpha, beta ) {\n\tif ( alpha <= 0.0 || beta <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( alpha <= 1.0 ) {\n\t\treturn PINF;\n\t}\n\treturn ( alpha*beta ) / ( alpha-1.0 );\n}\n\n\n// EXPORTS //\n\nexport default mean;\n"],"names":["FLOAT64_PINF","Number","POSITIVE_INFINITY","alpha","beta","NaN","PINF"],"mappings":";yCAkDA,IAAIA,EAAeC,OAAOC,yBCY1B,SAAeC,EAAOC,GACrB,OAAKD,GAAS,GAAOC,GAAQ,EACrBC,IAEHF,GAAS,EACNG,EAECH,EAAMC,GAAWD,EAAM,EACjC"}